// <auto-generated />
using System;
using Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250728203523_UpdateContext")]
    partial class UpdateContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Backend.Models.Alarm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnalogInputId")
                        .HasColumnType("TEXT");

                    b.Property<double>("EdgeValue")
                        .HasColumnType("REAL");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnalogInputId");

                    b.ToTable("Alarm");
                });

            modelBuilder.Entity("Backend.Models.AlarmAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlarmId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("AlarmAlert");
                });

            modelBuilder.Entity("Backend.Models.AnalogData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AnalogInputId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AnalogInputId");

                    b.ToTable("AnalogData");
                });

            modelBuilder.Entity("Backend.Models.AnalogInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("HighLimit")
                        .HasColumnType("REAL");

                    b.Property<string>("IOAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("LowLimit")
                        .HasColumnType("REAL");

                    b.Property<bool>("ScanOn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScanTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("AnalogInput");
                });

            modelBuilder.Entity("Backend.Models.DigitalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DigitalInputId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DigitalInputId");

                    b.ToTable("DigitalData");
                });

            modelBuilder.Entity("Backend.Models.DigitalInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IOAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ScanOn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScanTime")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("DigitalInput");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("898b1f78-ddfa-4f84-8349-3f8ec62f52bf"),
                            Email = "admin@example.com",
                            Name = "Admin",
                            Password = "$2a$12$G7/QkZt1iK9viHX6HYa73OtnmgF/xYeJOf8klJ9XjnoYBEkHAWZhu",
                            Role = "Admin",
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("UsersToAnalogInputsJoinTable", b =>
                {
                    b.Property<Guid>("AnalogInputsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("AnalogInputsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersToAnalogInputsJoinTable");
                });

            modelBuilder.Entity("UsersToDigitalInputsJoinTable", b =>
                {
                    b.Property<Guid>("DigitalInputsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("DigitalInputsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersToDigitalInputsJoinTable");
                });

            modelBuilder.Entity("Backend.Models.Alarm", b =>
                {
                    b.HasOne("Backend.Models.AnalogInput", "AnalogInput")
                        .WithMany("Alarms")
                        .HasForeignKey("AnalogInputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalogInput");
                });

            modelBuilder.Entity("Backend.Models.AnalogData", b =>
                {
                    b.HasOne("Backend.Models.AnalogInput", "AnalogInput")
                        .WithMany()
                        .HasForeignKey("AnalogInputId");

                    b.Navigation("AnalogInput");
                });

            modelBuilder.Entity("Backend.Models.DigitalData", b =>
                {
                    b.HasOne("Backend.Models.DigitalInput", "DigitalInput")
                        .WithMany()
                        .HasForeignKey("DigitalInputId");

                    b.Navigation("DigitalInput");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("UsersToAnalogInputsJoinTable", b =>
                {
                    b.HasOne("Backend.Models.AnalogInput", null)
                        .WithMany()
                        .HasForeignKey("AnalogInputsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersToDigitalInputsJoinTable", b =>
                {
                    b.HasOne("Backend.Models.DigitalInput", null)
                        .WithMany()
                        .HasForeignKey("DigitalInputsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.AnalogInput", b =>
                {
                    b.Navigation("Alarms");
                });
#pragma warning restore 612, 618
        }
    }
}
